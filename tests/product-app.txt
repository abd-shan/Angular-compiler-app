import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { Store, createAction, createReducer, on, createSelector, createFeatureSelector } from '@ngrx/store';
import { withLatestFrom, map } from 'rxjs/operators';

// تعريف حالة التطبيق


@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  styles: [
    `
      .container {
        display: flex;
        margin: 0;
        padding: 20px;
        font-family: Arial, sans-serif;
      }

      .sidebar {
        width: 300px;
        padding: 20px;
        border-right: 2px solid #ccc;
        background-color: #f5f5f5;
      }

      .main-content {
        padding: 20px;
      }

      .product-form {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
      }

      .product-form input {
        width: 100%;
        padding: 8px;
        margin: 8px;
        border-radius: 4px;
        box-sizing: border-box;
      }

      .product-form button {
        background: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
      }

      .product-list {
        display: grid;
        gap: 20px;
      }

      .product-card {
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
      }

      .product-card img {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 4px;
        margin-bottom: 10px;
      }

      .product-card h3 {
        margin: 10px 0;
        color: #333;
      }

      .product-card p {
        color: #666;
        margin: 5px 0;
      }

      .product-card button {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 8px;
        margin-top: 10px;
      }

      .product-card button.edit {
        background: #28a745;
        color: white;
      }

      .product-card button.delete {
        background: #dc3545;
        color: white;
      }

      .tabs {
        display: flex;
        margin: 20px 0;
      }

      .tab {
        padding: 10px 20px;
        cursor: pointer;
        border: none;
        background: none;
      }

      .tab.active {
        border-bottom-color: #007bff;
        color: #007bff;
      }

      .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }

      .modal-content {
        background: white;
        padding: 30px;
        border-radius: 8px;
        max-width: 500px;
        width: 90%;
      }

      .modal-content img {
        width: 100%;
        max-width: 300px;
        height: auto;
        border-radius: 4px;
        margin: 15px 0;
      }
    `
  ],
  template: `
    <div class="container">
      <div class="sidebar">
        <h2>Add product</h2>

        <form class="product-form" (submit)="onSubmit($event)">
          <input type="text" placeholder="Product Name" [(ngModel)]="newProduct.name" name="name" required>
          <input type="text" placeholder="Product Description" [(ngModel)]="newProduct.description" name="description" required>
          <input type="text" placeholder="Image URL" [(ngModel)]="newProduct.image" name="image" required>
          <input type="number" placeholder="Price" [(ngModel)]="newProduct.price" name="price" required>
          <button type="submit">Add Product</button>
        </form>

        <div class="tabs">
          <button class="tab" [class.active]="(currentRoute$ | async) === '/products'" (click)="navigate('/products')">Products</button>
          <button class="tab" [class.active]="(currentRoute$ | async) === '/add'" (click)="navigate('/add')">Add</button>
        </div>
      </div>

      <div class="main-content">
        <div *ngIf="(currentRoute$ | async) === '/products'">
          <h2>Product List</h2>
          <div class="product-list">
            <div class="product-card" *ngFor="let product of products$ | async">
              <img [src]="product.image" [alt]="product.name">
              <h3>{{ product.name }}</h3>
              <p>{{ product.description }}</p>
              <p><strong>Price: {{ product.price }} SAR</strong></p>
              <button class="edit" (click)="showDetails(product.id)">View Details</button>
              <button class="edit" (click)="editProduct(product)">Edit</button>
              <button class="delete" (click)="deleteProduct(product.id)">Delete</button>
            </div>
          </div>
        </div>

        <div *ngIf="(currentRoute$ | async) === '/add'">
          <h2>Add New Product</h2>
          <form class="product-form">
            <input type="text" placeholder="Product Name" [(ngModel)]="newProduct.name" name="name" required>
            <input type="text" placeholder="Product Description" [(ngModel)]="newProduct.description" name="description" required>
            <input type="text" placeholder="Image URL" [(ngModel)]="newProduct.image" name="image" required>
            <input type="number" placeholder="Price" [(ngModel)]="newProduct.price" name="price" required>
            <button type="button" (click)="addProduct()">Add Product</button>
          </form>
        </div>

        <div *ngIf="(selectedProduct$ | async) as selectedProduct" class="modal">
          <div class="modal-content">
            <h2>{{ selectedProduct.name }}</h2>
            <img [src]="selectedProduct.image" [alt]="selectedProduct.name">
            <p><strong>Description:</strong> {{ selectedProduct.description }}</p>
            <p><strong>Price:</strong> {{ selectedProduct.price }} SAR</p>
            <button (click)="closeModal()">Close</button>
          </div>
        </div>
      </div>
    </div>
  `,
  providers: [
     provideStore({ app: appReducer })
  ]
})


export class App {
  private store = inject(Store<{ app: AppState }>);

  products$ = this.store.select(state => state.app.products);
  selectedProduct$ = this.store.select(state => state.app.selectedProduct);
  currentRoute$ = this.store.select(state => state.app.currentRoute);

  newProduct: any = {
    name: '',
    description: '',
    image: '',
    price: 0
  };

  // Product Management Methods
  addProduct() {
    if (this.newProduct.name && this.newProduct.description && this.newProduct.image && this.newProduct.price) {
      this.store.dispatch(addProduct({
        product: {
          name: this.newProduct.name,
          description: this.newProduct.description,
          image: this.newProduct.image,
          price: this.newProduct.price
        }
      }));
      this.resetNewProduct();
    }
  }

  deleteProduct(productId: number) {
    this.store.dispatch(deleteProduct({ id: productId }));
  }

  editProduct(product: Product) {
    this.newProduct = { ...product };
    this.navigate('/add');
  }

  showDetails(productId: number) {
    this.store.dispatch(showDetails({ id: productId }));
  }

  closeModal() {
    this.store.dispatch(closeModal());
  }

  // Navigation Methods
  navigate(route: string) {
    this.store.dispatch(navigate({ route }));
  }

  onSubmit(event: Event) {
    event.preventDefault();
    this.addProduct();
  }

  private resetNewProduct() {
    this.newProduct = {
      name: '',
      description: '',
      image: '',
      price: 0
    };
  }

  checkCondition() {
    // تمثال للاستخدام الصحيح لـ if
    const state = true;
    if (state === true) {
      // كود هنا
    }
  }

  runLoop() {
    // تمثال للاستخدام الصحيح لـ for
    for (let i = 0; i <= 0; i++) {
      // كود هنا
    }
  }



// القيم الابتدائية للحالة
const initialState: AppState = {
  products: [
    {
      id: 1,
      name: 'HP Laptop',
      description: 'Brand new HP Laptop with Intel i7 processor',
      image: 'https://images.pexels.com/photos/7974/pexels-photo.jpg',
      price: 3500
    },
    {
      id: 2,
      name: 'iPhone',
      description: 'iPhone 14 Pro with advanced camera system',
      image: 'https://images.pexels.com/photos/7974/pexels-photo.jpg',
      price: 4500
    },
    {
      id: 3,
      name: 'AirPods',
      description: 'Wireless Apple AirPods',
      image: 'https://images.pexels.com/photos/7974/pexels-photo.jpg',
      price: 800
    }
  ],
  selectedProduct: null,
  currentRoute: '/products'
};

// تعريف Actions
export const addProduct = createAction(
  '[Product] Add Product',
  (product: Omit<Product, 'id'>) => ({ product })
);

export const deleteProduct = createAction(
  '[Product] Delete Product',
  (id: number) => ({ id })
);

export const editProduct = createAction(
  '[Product] Edit Product',
  (product: Product) => ({ product })
);

export const showDetails = createAction(
  '[Product] Show Details',
  (id: number) => ({ id })
);

export const closeModal = createAction(
  '[Product] Close Modal'
);

export const navigate = createAction(
  '[App] Navigate',
  (route: string) => ({ route })
);

export const resetNewProduct = createAction(
  '[Product] Reset New Product'
);

// إنشاء Reducer
export const appReducer = createReducer(
  initialState,
  on(addProduct, (state, { product }) => {
    const newId = state.products.length > 0 ? Math.max(...state.products.map(p => p.id)) + 1 : 1;
    const newProduct = { ...product, id: newId };
    return {
      ...state,
      products: [...state.products, newProduct],
      currentRoute: '/products'
    };
  }),
  on(deleteProduct, (state, { id }) => ({
    ...state,
    products: state.products.filter(p => p.id !== id)
  })),
  on(showDetails, (state, { id }) => ({
    ...state,
    selectedProduct: state.products.find(p => p.id === id) || null
  })),
  on(closeModal, (state) => ({
    ...state,
    selectedProduct: null
  })),
  on(navigate, (state, { route }) => ({
    ...state,
    currentRoute: route
  }))
);

// إنشاء Selectors
export const selectProducts = (state: AppState) => state.products;
export const selectSelectedProduct = (state: AppState) => state.selectedProduct;
export const selectCurrentRoute = (state: AppState) => state.currentRoute;

}